# Autogenerated from a Treetop grammar. Edits may be lost.


module Silk
  include Treetop::Runtime

  def root
    @root ||= :top_level_declaration
  end

  module TopLevelDeclaration0
    def _1
      elements[1]
    end

    def assignment
      elements[2]
    end

    def _2
      elements[3]
    end

  end

  def _nt_top_level_declaration
    start_index = index
    if node_cache[:top_level_declaration].has_key?(index)
      cached = node_cache[:top_level_declaration][index]
      if cached
        node_cache[:top_level_declaration][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_alias
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt__
      s0 << r3
      if r3
        r4 = _nt_assignment
        s0 << r4
        if r4
          r5 = _nt__
          s0 << r5
          if r5
            i6 = index
            r7 = _nt_index
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r6 = r7
            else
              r8 = _nt_value
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r6 = r8
              else
                @index = i6
                r6 = nil
              end
            end
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TopLevelDeclaration0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:top_level_declaration][start_index] = r0

    r0
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        node_cache[:assignment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('<=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'<=\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('|=', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'|=\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module Index0
  end

  def _nt_index
    start_index = index
    if node_cache[:index].has_key?(index)
      cached = node_cache[:index][index]
      if cached
        node_cache[:index][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('/', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'/\'')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_index_tail
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Index0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r5 = _nt_index_tail
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:index][start_index] = r0

    r0
  end

  module IndexTail0
    def id
      elements[0]
    end

  end

  module IndexTail1
  end

  def _nt_index_tail
    start_index = index
    if node_cache[:index_tail].has_key?(index)
      cached = node_cache[:index_tail][index]
      if cached
        node_cache[:index_tail][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      r3 = _nt_id
      s2 << r3
      if r3
        if (match_len = has_terminal?('/', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'/\'')
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(IndexTail0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      i5 = index
      r6 = _nt_id
      if r6
        r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
        r5 = r6
      else
        r7 = _nt_glob
        if r7
          r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
          r5 = r7
        else
          @index = i5
          r5 = nil
        end
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IndexTail1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:index_tail][start_index] = r0

    r0
  end

  def _nt__
    start_index = index
    if node_cache[:_].has_key?(index)
      cached = node_cache[:_][index]
      if cached
        node_cache[:_][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[\\s\\n\\t]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[\\s\\n\\t]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:_][start_index] = r0

    r0
  end

  def _nt___
    start_index = index
    if node_cache[:__].has_key?(index)
      cached = node_cache[:__][index]
      if cached
        node_cache[:__][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[\\s\\n\\t]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[\\s\\n\\t]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:__][start_index] = r0

    r0
  end

  def _nt_glob
    start_index = index
    if node_cache[:glob].has_key?(index)
      cached = node_cache[:glob][index]
      if cached
        node_cache[:glob][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('**', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'**\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('*', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'*\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:glob][start_index] = r0

    r0
  end

  module Alias0
    def id
      elements[1]
    end
  end

  module Alias1
    def id
      elements[0]
    end

  end

  def _nt_alias
    start_index = index
    if node_cache[:alias].has_key?(index)
      cached = node_cache[:alias][index]
      if cached
        node_cache[:alias][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_id
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if (match_len = has_terminal?('/', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'/\'')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_id
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Alias0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Alias1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:alias][start_index] = r0

    r0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        node_cache[:value][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_template
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_construct
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_visor
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_chain
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_string
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              r6 = _nt_operations
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                r7 = _nt_number
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  r8 = _nt_boolean
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    r9 = _nt_portal
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r0 = r9
                    else
                      r10 = _nt_reference
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  module Reference0
    def value
      elements[1]
    end

  end

  module Reference1
    def alias
      elements[1]
    end

  end

  def _nt_reference
    start_index = index
    if node_cache[:reference].has_key?(index)
      cached = node_cache[:reference][index]
      if cached
        node_cache[:reference][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('/', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'/\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_alias
      s0 << r2
      if r2
        i4, s4 = index, []
        if (match_len = has_terminal?('(', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_value
          s4 << r6
          if r6
            if (match_len = has_terminal?(')', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\')\'')
              r7 = nil
            end
            s4 << r7
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Reference0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Reference1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:reference][start_index] = r0

    r0
  end

  module Template0
  end

  def _nt_template
    start_index = index
    if node_cache[:template].has_key?(index)
      cached = node_cache[:template][index]
      if cached
        node_cache[:template][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('`', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'`\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_construct
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        r4 = _nt_visor
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          r5 = _nt_chain
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Template0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:template][start_index] = r0

    r0
  end

  module Number0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('-', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Number0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Construct0
    def id
      elements[1]
    end

    def _
      elements[2]
    end
  end

  module Construct1
    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def _3
      elements[5]
    end

    def value
      elements[6]
    end

    def _4
      elements[7]
    end
  end

  module Construct2
    def _
      elements[1]
    end

  end

  def _nt_construct
    start_index = index
    if node_cache[:construct].has_key?(index)
      cached = node_cache[:construct][index]
      if cached
        node_cache[:construct][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('<', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'<\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r6 = _nt_id
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r5
          if r5
            r7 = _nt__
            s4 << r7
            if r7
              s8, i8 = [], index
              loop do
                i9, s9 = index, []
                if (match_len = has_terminal?('#', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'#\'')
                  r10 = nil
                end
                s9 << r10
                if r10
                  r11 = _nt_id
                  s9 << r11
                  if r11
                    r12 = _nt__
                    s9 << r12
                  end
                end
                if s9.last
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  r9.extend(Construct0)
                else
                  @index = i9
                  r9 = nil
                end
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s4 << r8
              if r8
                r13 = _nt__
                s4 << r13
                if r13
                  if (match_len = has_terminal?(':', false, index))
                    r14 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\':\'')
                    r14 = nil
                  end
                  s4 << r14
                  if r14
                    r15 = _nt__
                    s4 << r15
                    if r15
                      r16 = _nt_value
                      s4 << r16
                      if r16
                        r17 = _nt__
                        s4 << r17
                      end
                    end
                  end
                end
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Construct1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if (match_len = has_terminal?('>', false, index))
            r18 = true
            @index += match_len
          else
            terminal_parse_failure('\'>\'')
            r18 = nil
          end
          s0 << r18
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Construct2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:construct][start_index] = r0

    r0
  end

  module Visor0
    def selector
      elements[0]
    end

    def _1
      elements[1]
    end

    def _2
      elements[3]
    end

    def value
      elements[4]
    end

    def _3
      elements[5]
    end
  end

  module Visor1
    def _
      elements[1]
    end

  end

  def _nt_visor
    start_index = index
    if node_cache[:visor].has_key?(index)
      cached = node_cache[:visor][index]
      if cached
        node_cache[:visor][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('{', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'{\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt__
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          r5 = _nt_selector
          s4 << r5
          if r5
            r6 = _nt__
            s4 << r6
            if r6
              if (match_len = has_terminal?(':', false, index))
                r7 = true
                @index += match_len
              else
                terminal_parse_failure('\':\'')
                r7 = nil
              end
              s4 << r7
              if r7
                r8 = _nt__
                s4 << r8
                if r8
                  r9 = _nt_value
                  s4 << r9
                  if r9
                    r10 = _nt__
                    s4 << r10
                  end
                end
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Visor0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          if (match_len = has_terminal?('}', false, index))
            r11 = true
            @index += match_len
          else
            terminal_parse_failure('\'}\'')
            r11 = nil
          end
          s0 << r11
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Visor1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:visor][start_index] = r0

    r0
  end

  module String0
  end

  module String1
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'"\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        if has_terminal?(@regexps[gr = '\A[\\\\]'] ||= Regexp.new(gr), :regexp, index)
          r5 = true
          @index += 1
        else
          terminal_parse_failure('[\\\\]')
          r5 = nil
        end
        s4 << r5
        if r5
          if (match_len = has_terminal?('"', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\'"\'')
            r6 = nil
          end
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(String0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          if has_terminal?(@regexps[gr = '\A[^"]'] ||= Regexp.new(gr), :regexp, index)
            r7 = true
            @index += 1
          else
            terminal_parse_failure('[^"]')
            r7 = nil
          end
          if r7
            r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
            r3 = r7
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r8 = nil
        end
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(String1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Operations0
    def op_exp
      elements[2]
    end

  end

  def _nt_operations
    start_index = index
    if node_cache[:operations].has_key?(index)
      cached = node_cache[:operations][index]
      if cached
        node_cache[:operations][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('%', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'%\'')
      r1 = nil
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_op_exp
        s0 << r3
        if r3
          if (match_len = has_terminal?(')', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r4 = nil
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Operations0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:operations][start_index] = r0

    r0
  end

  module OpExp0
    def op_base
      elements[0]
    end

    def _1
      elements[1]
    end

    def ops
      elements[2]
    end

    def _2
      elements[3]
    end

    def op_exp
      elements[4]
    end
  end

  def _nt_op_exp
    start_index = index
    if node_cache[:op_exp].has_key?(index)
      cached = node_cache[:op_exp][index]
      if cached
        node_cache[:op_exp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_op_base
    s1 << r2
    if r2
      r3 = _nt__
      s1 << r3
      if r3
        r4 = _nt_ops
        s1 << r4
        if r4
          r5 = _nt__
          s1 << r5
          if r5
            r6 = _nt_op_exp
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(OpExp0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r7 = _nt_op_base
      if r7
        r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:op_exp][start_index] = r0

    r0
  end

  module OpBase0
    def op_exp
      elements[1]
    end

  end

  def _nt_op_base
    start_index = index
    if node_cache[:op_base].has_key?(index)
      cached = node_cache[:op_base][index]
      if cached
        node_cache[:op_base][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if (match_len = has_terminal?('(', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_op_exp
      s1 << r3
      if r3
        if (match_len = has_terminal?(')', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(OpBase0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r5 = _nt_number
      if r5
        r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
        r0 = r5
      else
        r6 = _nt_boolean
        if r6
          r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
          r0 = r6
        else
          r7 = _nt_portal
          if r7
            r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
            r0 = r7
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:op_base][start_index] = r0

    r0
  end

  def _nt_ops
    start_index = index
    if node_cache[:ops].has_key?(index)
      cached = node_cache[:ops][index]
      if cached
        node_cache[:ops][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('<=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'<=\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('<', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'<\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('>', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'>\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?('>=', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'>=\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if (match_len = has_terminal?('=', false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('\'=\'')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if (match_len = has_terminal?('&', false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('\'&\'')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                if (match_len = has_terminal?('|', false, index))
                  r7 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'|\'')
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  if (match_len = has_terminal?('%', false, index))
                    r8 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'%\'')
                    r8 = nil
                  end
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    if (match_len = has_terminal?('^', false, index))
                      r9 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'^\'')
                      r9 = nil
                    end
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r0 = r9
                    else
                      if (match_len = has_terminal?('*', false, index))
                        r10 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'*\'')
                        r10 = nil
                      end
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r0 = r10
                      else
                        if (match_len = has_terminal?('/', false, index))
                          r11 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\'/\'')
                          r11 = nil
                        end
                        if r11
                          r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                          r0 = r11
                        else
                          if (match_len = has_terminal?('+', false, index))
                            r12 = true
                            @index += match_len
                          else
                            terminal_parse_failure('\'+\'')
                            r12 = nil
                          end
                          if r12
                            r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                            r0 = r12
                          else
                            if (match_len = has_terminal?('-', false, index))
                              r13 = true
                              @index += match_len
                            else
                              terminal_parse_failure('\'-\'')
                              r13 = nil
                            end
                            if r13
                              r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                              r0 = r13
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:ops][start_index] = r0

    r0
  end

  def _nt_boolean
    start_index = index
    if node_cache[:boolean].has_key?(index)
      cached = node_cache[:boolean][index]
      if cached
        node_cache[:boolean][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?('T', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'T\'')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('F', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'F\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean][start_index] = r0

    r0
  end

  module Portal0
    def id
      elements[1]
    end
  end

  module Portal1
  end

  def _nt_portal
    start_index = index
    if node_cache[:portal].has_key?(index)
      cached = node_cache[:portal][index]
      if cached
        node_cache[:portal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?('@', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'@\'')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_selector
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('~', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('\'~\'')
        r4 = nil
      end
      s0 << r4
      if r4
        r6 = _nt_id
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          s7, i7 = [], index
          loop do
            i8, s8 = index, []
            if (match_len = has_terminal?('.', false, index))
              r9 = true
              @index += match_len
            else
              terminal_parse_failure('\'.\'')
              r9 = nil
            end
            s8 << r9
            if r9
              r10 = _nt_id
              s8 << r10
            end
            if s8.last
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              r8.extend(Portal0)
            else
              @index = i8
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Portal1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:portal][start_index] = r0

    r0
  end

  def _nt_selector
    start_index = index
    if node_cache[:selector].has_key?(index)
      cached = node_cache[:selector][index]
      if cached
        node_cache[:selector][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_selector_or
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?('*', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'*\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:selector][start_index] = r0

    r0
  end

  module SelectorBase0
    def selector_or
      elements[1]
    end

  end

  module SelectorBase1
    def id
      elements[1]
    end
  end

  module SelectorBase2
  end

  def _nt_selector_base
    start_index = index
    if node_cache[:selector_base].has_key?(index)
      cached = node_cache[:selector_base][index]
      if cached
        node_cache[:selector_base][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('-', false, index))
      r2 = true
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i3 = index
      i4, s4 = index, []
      if (match_len = has_terminal?('(', false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r5 = nil
      end
      s4 << r5
      if r5
        r6 = _nt_selector_or
        s4 << r6
        if r6
          if (match_len = has_terminal?(')', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r7 = nil
          end
          s4 << r7
        end
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(SelectorBase0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r3 = r4
      else
        i8, s8 = index, []
        if (match_len = has_terminal?('#', false, index))
          r9 = true
          @index += match_len
        else
          terminal_parse_failure('\'#\'')
          r9 = nil
        end
        s8 << r9
        if r9
          r10 = _nt_id
          s8 << r10
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(SelectorBase1)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r3 = r8
        else
          r11 = _nt_id
          if r11
            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
            r3 = r11
          else
            @index = i3
            r3 = nil
          end
        end
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SelectorBase2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:selector_base][start_index] = r0

    r0
  end

  module SelectorOr0
    def selector_and
      elements[1]
    end
  end

  module SelectorOr1
    def selector_and
      elements[0]
    end

  end

  def _nt_selector_or
    start_index = index
    if node_cache[:selector_or].has_key?(index)
      cached = node_cache[:selector_or][index]
      if cached
        node_cache[:selector_or][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_selector_and
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if (match_len = has_terminal?('|', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'|\'')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_selector_and
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SelectorOr0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SelectorOr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:selector_or][start_index] = r0

    r0
  end

  module SelectorAnd0
    def selector_base
      elements[1]
    end
  end

  module SelectorAnd1
    def selector_base
      elements[0]
    end

  end

  def _nt_selector_and
    start_index = index
    if node_cache[:selector_and].has_key?(index)
      cached = node_cache[:selector_and][index]
      if cached
        node_cache[:selector_and][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_selector_base
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if (match_len = has_terminal?('&', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'&\'')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_selector_base
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SelectorAnd0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SelectorAnd1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:selector_and][start_index] = r0

    r0
  end

  def _nt_id
    start_index = index
    if node_cache[:id].has_key?(index)
      cached = node_cache[:id][index]
      if cached
        node_cache[:id][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z_$]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z_$]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:id][start_index] = r0

    r0
  end

  module Chain0
    def _1
      elements[0]
    end

    def _2
      elements[2]
    end
  end

  module Chain1
    def value
      elements[1]
    end
  end

  module Chain2
    def left_wing
      elements[0]
    end

    def value
      elements[1]
    end

    def right_wing
      elements[3]
    end
  end

  def _nt_chain
    start_index = index
    if node_cache[:chain].has_key?(index)
      cached = node_cache[:chain][index]
      if cached
        node_cache[:chain][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_left_wing
    s0 << r1
    if r1
      r2 = _nt_value
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          i5 = index
          i6, s6 = index, []
          r7 = _nt__
          s6 << r7
          if r7
            if (match_len = has_terminal?('|', false, index))
              r8 = true
              @index += match_len
            else
              terminal_parse_failure('\'|\'')
              r8 = nil
            end
            s6 << r8
            if r8
              r9 = _nt__
              s6 << r9
            end
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Chain0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r10 = _nt__
            if r10
              r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
              r5 = r10
            else
              @index = i5
              r5 = nil
            end
          end
          s4 << r5
          if r5
            r11 = _nt_value
            s4 << r11
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(Chain1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          r12 = _nt_right_wing
          s0 << r12
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Chain2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:chain][start_index] = r0

    r0
  end

  module LeftWing0
  end

  module LeftWing1
  end

  module LeftWing2
  end

  def _nt_left_wing
    start_index = index
    if node_cache[:left_wing].has_key?(index)
      cached = node_cache[:left_wing][index]
      if cached
        node_cache[:left_wing][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    if (match_len = has_terminal?('+', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('\'+\'')
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?('-', false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('[', false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure('\'[\'')
        r5 = nil
      end
      s0 << r5
      if r5
        s6, i6 = [], index
        loop do
          i7, s7 = index, []
          i9 = index
          if (match_len = has_terminal?('+', false, index))
            r10 = true
            @index += match_len
          else
            terminal_parse_failure('\'+\'')
            r10 = nil
          end
          if r10
            r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
            r9 = r10
          else
            if (match_len = has_terminal?('-', false, index))
              r11 = true
              @index += match_len
            else
              terminal_parse_failure('\'-\'')
              r11 = nil
            end
            if r11
              r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
              r9 = r11
            else
              @index = i9
              r9 = nil
            end
          end
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r8
          if r8
            i13 = index
            r14 = _nt_id
            if r14
              r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
              r13 = r14
            else
              if (match_len = has_terminal?('*', false, index))
                r15 = true
                @index += match_len
              else
                terminal_parse_failure('\'*\'')
                r15 = nil
              end
              if r15
                r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
                r13 = r15
              else
                @index = i13
                r13 = nil
              end
            end
            if r13
              r12 = r13
            else
              r12 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r12
            if r12
              i17, s17 = index, []
              if (match_len = has_terminal?('=', false, index))
                r18 = true
                @index += match_len
              else
                terminal_parse_failure('\'=\'')
                r18 = nil
              end
              s17 << r18
              if r18
                r20 = _nt_id
                if r20
                  r19 = r20
                else
                  r19 = instantiate_node(SyntaxNode,input, index...index)
                end
                s17 << r19
              end
              if s17.last
                r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                r17.extend(LeftWing0)
              else
                @index = i17
                r17 = nil
              end
              if r17
                r16 = r17
              else
                r16 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r16
            end
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(LeftWing1)
          else
            @index = i7
            r7 = nil
          end
          if r7
            s6 << r7
          else
            break
          end
        end
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LeftWing2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:left_wing][start_index] = r0

    r0
  end

  module RightWing0
  end

  module RightWing1
  end

  module RightWing2
  end

  def _nt_right_wing
    start_index = index
    if node_cache[:right_wing].has_key?(index)
      cached = node_cache[:right_wing][index]
      if cached
        node_cache[:right_wing][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      i4, s4 = index, []
      r6 = _nt_id
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s4 << r5
      if r5
        if (match_len = has_terminal?('=', false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('\'=\'')
          r7 = nil
        end
        s4 << r7
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(RightWing0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r3
      if r3
        i9 = index
        r10 = _nt_id
        if r10
          r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
          r9 = r10
        else
          if (match_len = has_terminal?('*', false, index))
            r11 = true
            @index += match_len
          else
            terminal_parse_failure('\'*\'')
            r11 = nil
          end
          if r11
            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
            r9 = r11
          else
            @index = i9
            r9 = nil
          end
        end
        if r9
          r8 = r9
        else
          r8 = instantiate_node(SyntaxNode,input, index...index)
        end
        s2 << r8
        if r8
          i13 = index
          if (match_len = has_terminal?('+', false, index))
            r14 = true
            @index += match_len
          else
            terminal_parse_failure('\'+\'')
            r14 = nil
          end
          if r14
            r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
            r13 = r14
          else
            if (match_len = has_terminal?('-', false, index))
              r15 = true
              @index += match_len
            else
              terminal_parse_failure('\'-\'')
              r15 = nil
            end
            if r15
              r15 = SyntaxNode.new(input, (index-1)...index) if r15 == true
              r13 = r15
            else
              @index = i13
              r13 = nil
            end
          end
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s2 << r12
        end
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(RightWing1)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if (match_len = has_terminal?(']', false, index))
        r16 = true
        @index += match_len
      else
        terminal_parse_failure('\']\'')
        r16 = nil
      end
      s0 << r16
      if r16
        i18 = index
        if (match_len = has_terminal?('+', false, index))
          r19 = true
          @index += match_len
        else
          terminal_parse_failure('\'+\'')
          r19 = nil
        end
        if r19
          r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
          r18 = r19
        else
          if (match_len = has_terminal?('-', false, index))
            r20 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r20 = nil
          end
          if r20
            r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
            r18 = r20
          else
            @index = i18
            r18 = nil
          end
        end
        if r18
          r17 = r18
        else
          r17 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r17
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RightWing2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:right_wing][start_index] = r0

    r0
  end

end

class SilkParser < Treetop::Runtime::CompiledParser
  include Silk
end

