grammar Silk

  rule silk_file
    (_ first:top_level_declaration? rest:(__ top_level_declaration)*) _
  end

  rule top_level_declaration
    (alias:alias? _ assignment _ tail:(index / value))
  end

  rule assignment
    '<=' / '|='
  end

  rule index
    ('/' index_tail?) / index_tail
  end

  rule index_tail
    ((id '/')* (id / '*'))
  end

  rule alias
    id  ('/' id)*
  end

  rule _
    [\s\n\t]*
  end

  rule __
    [\s\n\t]+
  end

  rule value
    left_value right_value
  end

  rule left_value
    template / field / construct / visor / chain / operations / string / number / boolean / reference / id / portal / association / conditional
  end

  rule right_value
    conditional / association / portal / ''
  end

  rule null
    '_'
  end

  rule everything
    '*'
  end

  rule self
    '@'
  end

  rule template
    '`' (construct / visor / chain)
  end

  rule field
    '^' value
  end

  rule number
    '-'? [0-9] [0-9]*
  end

  rule string
    '"' (([\\] '"') / [^"])* '"'
  end

  rule boolean
    ('true' / 'false')
  end

  rule id
    [a-zA-Z_$]+
  end

  rule conditional
    '?' _ value _ value?
  end

  rule association
    ':' _ value
  end

  rule portal
    '~' id? ('.' id)*
  end

  rule sequence
    (_ value _)+
  end

  rule reference
    '/' alias ( '(' left_wing? _ sequence? _ right_wing? ')' )?
  end

  rule construct
    '{' left_wing? _ sequence? _ right_wing? '}'
  end

  rule visor
    '<' left_wing? _ sequence? _ right_wing? '>'
  end

  rule chain
    '[' left_wing? _ sequence _ right_wing? ']'
  end

  rule left_wing
    left_gate? (__ left_gate)* '|'
  end

  rule left_gate
    ( '+' / '-')? id? ( '=' id?)?
  end

  rule right_wing
    '|' right_gate? (__ right_gate)*
  end

  rule right_gate
    ((id? '=' )? id? ('+' / '-')?)
  end

  rule operations
    '(' op_exp ')'
  end

  rule op_exp
    (op_base ( _ operator _ op_exp )+ ) / op_base
  end

  rule op_base
    ( '(' op_exp ')' ) / value
  end

  rule operator
    ('<=' / '<' / '>' / '>=' / '=' / '&' / '|' / '%' / '^' / '*' / '/' / '+' / '-')
  end

end
